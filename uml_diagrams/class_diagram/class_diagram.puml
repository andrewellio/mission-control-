@startuml MissionControl
class MissionControl {
  model: Model
}
Model "1" <-- "1" MissionControl : runs

class View {
  model: Model
  goNoGo: GoNoGoView
  map: MapView
  phase: PhaseView
  readings: ReadingsView
  void draw()
}
MapService "1" <-- "1" View : gets map from


class Model {
  views: List<View>
  controller: Controller
  rocketLocation: Location
  rocketVector: Vector
  rocketAltitude: float
  rocketVelocity: float
  rocketState: RocketState
  simulationResults: List<Simulation>

  void updateRocket()
  void runSimulations()
}
View "1..*" <-- "1" Model : sends updates to
Simulator <-- Model : requests simulations from
WeatherService <-- Model : requests weather from
Rocket "1" <-- "1" Model : sends instructions to

class Controller {
  void sendNoGo()
  void sendGo()
  void sendLaunchImminent()
  void updateLaunchAngle()
  void updateWeather()
  void suggestLaunchAngle(Vector)
  void runSimulations()
  void setLocation(Location)
}
Model "1" <-- "1" Controller : sends inputs to

class Location {
  latitude: float
  longitude: float
}

class Vector {
  x: float
  y: float
  z: float
}

enum RocketState {
  LIFT_OFF
  POWERED_ASCENT
  COAST
  APOGEE
  EJECTION
  RECOVERY
}

interface Rocket {
  void suggestLaunchAngle(Vector)
  void update()
}
Model <-- Rocket : sends status to

interface Simulator {
  Simulation runSimulation(Vector, Location, Weather)
  List<Simulation> getResults()
}
Model <-- Simulator : sends results to


interface WeatherService {
  Weather getWeather()
  void setLocation(Location)
}
Model <-- WeatherService : sends results to

interface MapService

@enduml
